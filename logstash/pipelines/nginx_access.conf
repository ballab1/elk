
input {
  pipeline { address => nginx_access }
}

filter {
  # tag with name of conf file
  mutate { add_tag => [ "nginx_access" ] }

  if [message] =~ /nginx_access:/ { 

    if "" in [nginx_message] { 
      json {
        add_tag => [ "_json" ]
        tag_on_failure => ["_nginx_access.jsonparsefailure"]
        id => "nginx_access"
        source => "nginx_message"
        target => "nginx" 
        remove_field => [ "nginx_message" ]
      }
    }

    if "" in [nginx][core][http][http_user_agent] { 
#      mutate { add_tag => [ "_nginx.core.http.http_user_agent" ] }
      useragent {
        add_tag => [ "_useragent" ]
        source => "nginx.core.http.http_user_agent"
        prefix => "nginx.user_agent."
#        remove_field => [ "nginx.core.http.http_user_agent" ]
      }
    }

    if "" in [nginx][core][request] { 
#      mutate { add_tag => [ "_nginx.core.request" ] }
      grok {
        tag_on_failure => ["_nginx_access.grokparsefailure"]
#        patterns_dir => ["./patterns"]
        match => { "nginx.core.request" => "%{S3_REQUEST_LINE}" }
#         remove_field => [ "nginx.core.request" ]
      }
    }

    if "" in [nginx][time_local] {
      date {
        tag_on_failure => ["_nginx_access.dateparsefailure.1"]
        match => [ "nginx.time_local", "dd/MMM/yyyy:HH:mm:ss Z", "ISO8601" ]
        target => "ts"
        add_tag => [ "_date" ]
      }
      mutate { remove_field => [ "nginx.time_local" ] }
      mutate { rename => { "ts" => "nginx.time_local" } } 
    }

    mutate {
      add_tag => [ "_mutate" ]
      tag_on_failure => "_nginx_access.mutate_error"
      replace => { "type" => "nginx" }
      remove_field => [ "msg2", "syslog_message" ]
    }
  }
}

output {
  elasticsearch { hosts => ['${ELASTICSEARCH_HOSTS:elasticsearch:9200}'] }
}
