
input {
  pipeline { address => nginx_error }
}

# <188>Nov 20 22:06:33 nginx.s3.home nginx_error: 2020/11/20 22:06:33 [warn] 1055#1055: *37889 send() to syslog failed while logging request, client: 10.3.1.131, server: default, request: "GET /nagios/cgi-bin/status.cgi?servicegroup=DRIVES&style=detail HTTP/1.1", upstream: "http://172.31.1.9:80/nagios/cgi-bin/status.cgi?servicegroup=DRIVES&style=detail", host: "s3.ubuntu.home", referrer: "https://s3.ubuntu.home/nagios/cgi-bin/status.cgi?servicegroup=DRIVES&style=detail"
# <187>Nov 28 08:32:05 nagios.s3.home nginx_error: 2020/11/28 08:32:05 [error] 4857#4857: send() failed (111: Connection refused)

filter {
  # tag with name of conf file
  mutate { add_tag => [ "_%{type}" ] }
  mutate { replace => { "type" => 'nginx_error' } }
  mutate { add_field => { "syslog_program" => 'nginx' } }


  if "" in [msg1] { 
    mutate { remove_field => [ "msg1" ]  }
  }

  if [message] =~ /nginx_error:/ { 
    if "" in [nginx_message] {
      grok {
        tag_on_failure => ["_nginx_error.grokparsefailure.1"]
        match =>  { "nginx_message" => "%{NGINXERRMSG:nginx_errmsg}, %{GREEDYDATA:nginx_errparams}" } 
      }
      if "_nginx_error.grokparsefailure.1" in [tags] {
        mutate {
          tag_on_failure => "_nginx_error.mutate_error"
          remove_tag => [ "_nginx_error.grokparsefailure.1" ]
          replace => { "syslog_message" => "%{nginx_message}" } 
        }
      }
      mutate { remove_field => [ "nginx_message" ] }
    }

    if "" in [nginx_errparams] {
      kv {
        tag_on_failure => "_nginx_error.kv_filter_error"
#        add_tag => [ "_kv" ]
        field_split => ", "
        value_split => ":"
        source => "nginx_errparams"
        prefix => "nginx."
      }
      mutate { remove_field => [ "nginx_errparams" ] }
    }
    
    if "" in [nginx_errmsg] {
      mutate {
        tag_on_failure => "_nginx_error.mutate_error"
        replace => { "syslog_message" => "%{nginx_errmsg}" } 
        remove_field => [ "nginx_errmsg" ]
      }
    }

    if "" in [nginx.core.request] { 
      grok {
        tag_on_failure => ["_nginx_error.grokparsefailure.2"]
        match => { "nginx.request" => "%{BBREQUEST}" }
#        add_tag => [ "_request" ]
#        remove_field => [ "nginx_message" ]
      }
    }
 
  }
}

output {
  elasticsearch {
    hosts => ['${ELASTICSEARCH_HOSTS:elasticsearch:9200}']
#    user => logstash_internal
#    password => '123Oleary'
  }
}
