input {
  tcp {
    port => 5514
    type => syslog
    tags => [ "_tcp" ]
  }
  udp {
    port => 5514
    type => syslog
    tags => [ "_udp" ]
  }
}

filter {
  if [message] =~ /^(ALL|DEBUG|FINEST|FINER|FILE|CONFIG|INFO|WARNING|SEVERE):/ {
    mutate {
      add_tag => [ "_jenkins_logstash_plugin", "_syslog" ]
      replace => { "type" => "jenkins" } 
    }
  }
  else if [message] =~ /^\r$/ and [host] == "10.3.1.6" {
    mutate {
      add_tag => [ "_jenkins_logstash_plugin" ]
      replace => { "type" => "jenkins" }
      remove_field => [ "message" ]
    }
  }
  else {
    grok {
      patterns_dir => ["./patterns"]
      add_tag => [ "_syslog" ]
      match => { "message" => "%{SYSLOGPRI:syslog_pri}(?:\d )?%{SYSLOGDATETIME:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" }
    }
    if "_grokparsefailure" not in [tags] {
      syslog_pri { } 

    #  ensure new data has correct timezone
#      mutate { add_field => [ "received_at", "%{@ts}" ] }
#      grok { match => {  "received_at" => "%{TIMESTAMP_ISO8601:tsNoZ}Z" } }
#      date { 
#        timezone => "America/New_York"
#        match => ["tsNoZ", "ISO8601"]
#      }
#      mutate { remove_field => [ "received_at", "tsNoZ" ] }

      #  decode initial part of msg
      grok {
        patterns_dir => ["./patterns"]
        match => { "syslog_message" => "%{BBSYSLOG}" }
      }

      if "" in ["%{msg}%{msg1}%{msg2}%{msg3}%{msg4}"] {
        mutate {
          remove_tag => [ "_grokparsefailure" ]
        }
      }
    }
  }
}

output {
  if "" in [msg1] {
     pipeline { send_to => nginx_error }
  }
  else if "" in [msg2] {
     pipeline { send_to => nginx_access }
  }
  else if "" in [msg3] {
     pipeline { send_to => jenkins }
  }
  else if "" in [msg4] {
     pipeline { send_to => microk8s }
  }
  else if "" in [msg] {
     pipeline { send_to => other }
  }
  else {
     elasticsearch { hosts => ['${ELASTICSEARCH_HOSTS:elasticsearch:9200}'] }
  }

#  if "_syslog" not in [tags] or "_grokparsefailure" in [tags] {
#    stdout { codec => rubydebug }
#  }
}
