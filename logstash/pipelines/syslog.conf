
input {
  tcp {
    port => 5514
    type => syslog
    tags => [ "_tcp" ]
  }
  udp {
    port => 5514
    type => syslog
    tags => [ "_udp" ]
  }
}

filter {
  if [type] == "syslog" {

#    date {
#      timezone => 'America/New_York'
#      add_field => {
#        "received_at" => "%{@timestamp}"
#      }
#    }

    grok {
      add_tag => [ "_syslog" ]
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\]?)?:? %{GREEDYDATA:syslog_message}" }
    }

#    date {
#      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
#      add_field => {
#        "received_from" => "%{host}"
#      }
#    }

#    if "nginx_error:" in [message] {
#      grok {
#        add_tag => [ "_nginx_error" ]
#        match => { "syslog_message" => '(?<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[%{DATA:err_severity}\] (%{NUMBER:pid:int}#%{NUMBER}: \*%{NUMBER}|\*%{NUMBER}) %{DATA:err_message}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: "%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}")?(?:, upstream: "%{DATA:upstream}")?(?:, host: "%{IPORHOST:host}")?(?:, referrer: "%{URI:referrer}")?' }
#      }
#    }

#    if [syslog_program] in ["containerd", "dockerd", "docker.dockerd"]  {
#      kv { 
##        add_tag => [ "_kv" ]
#        source => [syslog_message]
#      }
#    }

#    if "" in [syslog_program] {
#      mutate {
#        replace => { "type" => "%{syslog_program}" }
#      }
#    }
  }
}

output {
  if [syslog_program] == "nginx_access" {
    pipeline { send_to => nginx_access }
  }
  else if [syslog_program] == "docker-registry" {
    pipeline { send_to => docker_registry }
  }
  else {
    elasticsearch { hosts => ['${ELASTICSEARCH_HOSTS:elasticsearch:9200}'] }
  }
#  stdout { codec => rubydebug }
}
