
input {
  pipeline { address => other }
}


# message:		<30>Dec 12 01:27:15 s2.ubuntu.home docker-registry[836]: 10.3.1.17 - - [12/Dec/2020:01:27:15 -0500] "GET /v2/thirdparty/zoonavigator/manifests/1.0.1 HTTP/1.1" 200 21087 "" "curl/7.69.1"
# syslog_message:	10.3.1.17 - - [12/Dec/2020:01:27:15 -0500] "GET /v2/thirdparty/zoonavigator/manifests/1.0.1 HTTP/1.1" 200 21087 "" "curl/7.69.1"

# message:		<30>Dec 12 01:27:15 s2.ubuntu.home docker-registry[836]: time="2020-12-12T01:27:15-05:00" level=info msg="response completed" go.version=go1.8.1 http.request.host="ubuntu-s2.home:5000" http.request.id=74927f15-bd3a-4cde-aa70-263bcaeba3ea http.request.method=GET http.request.remoteaddr="10.3.1.17:37024" http.request.uri=/v2/thirdparty/zoonavigator/manifests/1.1.0 http.request.useragent=curl/7.69.1 http.response.contenttype=application/vnd.docker.distribution.manifest.v2+json http.response.duration=6.726351ms http.response.status=200 http.response.written=2208 instance.id=d87e051a-9001-4b0e-82b3-b402f582130c version=v2.6.2+debian

# message:		<30>Dec 12 09:11:26 s2.ubuntu.home console-kit-daemon[1277]: console-kit-daemon[1277]: GLib-CRITICAL: Source ID 18749 was not found when attempting to remove it
# syslog_message:	console-kit-daemon[1277]: GLib-CRITICAL: Source ID 18749 was not found when attempting to remove it


filter {
  # tag with name of conf file
  mutate { add_tag => [ "_%{type}" ] }
  mutate { replace => { "type" => 'other' } }

  if [syslog_program] in ["containerd", "dockerd", "docker.dockerd"]  {
    kv { 
      tag_on_failure => "_other.kv_filter_error"
#      add_tag => [ "_kv" ]
      source => "syslog_message"
      prefix => "%{syslog_program}."
    }
    mutate { remove_field => [ "syslog_message" ] }

    date {
      tag_on_failure => ["_jenkins.dateparsefailure.1"]
      match => [ "containerd.time", "ISO8601" ]
      target => "ts"
    }
    mutate { remove_field => [ "containerd.time" ] }
    mutate { rename => { "ts" => "containerd.time" } }
  }

  if "" in [msg5] {
    mutate {
      tag_on_failure => "_other.mutate_error.1"
      replace => { "syslog_message" => "%{syslog1_message}" }
      remove_field => [ "msg5", "syslog1_message" ]
    }
  }
 
  if "" in [msg6] {
    mutate {
      tag_on_failure => "_other.mutate_error.2"
      replace => { "syslog_message" => "%{syslog1_message}" }
      remove_field => [ "msg6", "syslog1_message" ]
    }
  }
}

output {
#  if [syslog_program] == 'sshd' {
#    csv {
##    filename_failure => "sshd.log"
#      path => "/var/log/sshd.log"
#      fields => [ "@timestamp", "host", "port", "type", "message" ]
#    } 
#  }
  elasticsearch {
    hosts => ['${ELASTICSEARCH_HOSTS:elasticsearch:9200}']
#    user => logstash_internal
#    password => '123Oleary'
  }
}
